name: CI
on:
  push:
    branches: [main]
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [main]
permissions:
  contents: read
jobs:
  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run Audit
        run: npm audit --omit=dev --audit-level=moderate
  compatibility:
    name: "Compatibility"
    runs-on: ubuntu-latest
    needs: [audit]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'
      - name: Pack library
        run: |
          mkdir ./tmp
          npm pack --pack-destination ./tmp
          ls -l ./tmp
      - name: Install Vite test project
        run: |
          mkdir vite-test && cd vite-test
          npm init -y
          npm install vite react react-dom @vitejs/plugin-react typescript @types/react @types/react-dom --no-save
          npm install ../tmp/*.tgz --no-save
          echo 'import { is } from "@valkyriestudios/utils/is"; console.log(is(123));' > main.ts
          echo 'import { defineConfig } from "vite"; export default defineConfig({});' > vite.config.ts
      - name: Run Vite build
        run: |
          cd vite-test
          npx vite build
      - name: Typescript bundler resolution check
        run: |
          touch tsconfig.vite.json
          echo '{"extends":"./tsconfig.json","compilerOptions":{"moduleResolution":"bundler","noEmit":true},"include": ["vite-test"]}' > tsconfig.vite.json
          npx tsc -p tsconfig.vite.json
  runtimes_node:
    name: Node
    runs-on: ubuntu-latest
    needs: [compatibility]
    strategy:
      fail-fast: false
      matrix:
        node: [20, 22]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Europe/Brussels"
      - name: Install Dependencies
        run: npm ci
      - name: Run Lint
        run: npm run lint
      - name: Run Types
        run: npm run types
      - name: Run Tests
        run: npm run test
  runtimes_bun:
    name: Bun
    runs-on: ubuntu-latest
    needs: [compatibility]
    steps:
      - uses: actions/checkout@v3
      - name: Use Bun
        uses: oven-sh/setup-bun@v1
      - uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Europe/Brussels"
      - name: Install Dependencies
        run: bun install
      - name: Run Lint
        run: bun run lint
      - name: Run Types
        run: bun run types
      - name: Run Tests
        run: bun run test
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: [runtimes_node, runtimes_bun]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'npm'
      - uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Europe/Brussels"
      - run: npm ci
      - run: npm run test:coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/
          fail_ci_if_error: true
          files: ./lcov.info,./lcov-report
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
  publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [coverage]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org/'
      - name: Install Dependencies
        run: npm ci
      - name: Prepare distribution
        run: |
          rm -rf ./dist
          mkdir ./dist
          npx tsc -p ./tsconfig.build.cjs.json
          npx tsc -p ./tsconfig.build.esm.json
          npx tsc -p ./tsconfig.types.json
          npx tsc -p ./tsconfig.types_all.json
          cp package.json README.md LICENSE.md .npmignore ./dist
      - name: Publish to npm
        run: |
          cd ./dist
          npm publish --access public --verbose
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
